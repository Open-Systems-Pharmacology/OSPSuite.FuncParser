name: Build and Publish NuGet Package for all supported platforms

on:
  push

env:
  MAJOR: 4
  MINOR: 0
  RELEASE: 0
  RUN: ${{ github.run_number }}

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      BUILD_ID: ${{ steps.get_build_id.outputs.BUILD_ID}}
      APP_VERSION: ${{ steps.get_app_version.outputs.APP_VERSION}}
    steps:
    - name: Get New Build Number
      id: get_build_id
      shell: bash
      run: |
        # Fetch the latest version from the organization NuGet package
        response=$(curl -s -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/orgs/Open-Systems-Pharmacology/packages/nuget/OSPSuite.FuncParser/versions)

        # Log the raw response for debugging
        echo "API Response: $response"

        # Check if the response indicates a package not found error
        if echo "$response" | jq -e '.message == "Package not found."' >/dev/null 2>&1; then
          incremented_version=56
        elif echo "$response" | jq -e . >/dev/null 2>&1; then
          latest_version=$(echo "$response" | jq -r '.[0].name // empty')

          if [[ -z "$latest_version" ]]; then
            # If no package is found, set the build number to 56
            incremented_version=56
          else
            # Extract MAJOR, MINOR, and RELEASE from the latest version
            IFS='.' read -r last_major last_minor last_release last_build <<< "$latest_version"

            # Compare with the current MAJOR, MINOR, and RELEASE
            if [[ "$last_major" -eq "${{ env.MAJOR }}" && "$last_minor" -eq "${{ env.MINOR }}" && "$last_release" -eq "${{ env.RELEASE }}" ]]; then
              # If they match, increment the last number
              incremented_version=$((last_build + 1))
            else
              # If the current version is different, reset build number to 0
              incremented_version=0
            fi
          fi
        else
          # If the response is not valid JSON, set the build number to 56
          incremented_version=56
        fi

        # Build the new build ID
        build_id="${incremented_version}"

        echo "latest build number: ${latest_version:-'None found'}"
        echo "new build number: ${incremented_version}"
        echo "BUILD_ID=${build_id}" >> $GITHUB_ENV
        echo "::set-output name=BUILD_ID::${build_id}"
      
    - name: Get App Version
      id: get_app_version
      shell: bash
      run: |
        app_version="${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.RELEASE }}.${{ env.BUILD_ID }}"
        echo "App Version: ${app_version}"
        echo "APP_VERSION=${app_version}" >> $GITHUB_ENV
        echo "::set-output name=APP_VERSION::${app_version}"

  build-macos-arm64:
    runs-on: macos-latest
    needs: get-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: define env variables
        run: |
          echo "APP_VERSION=${{needs.get-version.outputs.APP_VERSION}}" >> $GITHUB_ENV
          echo "BUILD_ID=${{needs.get-version.outputs.BUILD_ID}}" >> $GITHUB_ENV

      - name: Restore dependencies
        run: dotnet restore --source https://ci.appveyor.com/nuget/ospsuite-utility --source https://ci.appveyor.com/nuget/ospsuite-bddhelper --source https://www.nuget.org/api/v2/

      - name: Update version.h
        run: |
          LC_ALL=C sed -i '' -e "s@RELEASE 0@RELEASE ${{env.RELEASE}}@g" \
                     -e "s@MAJOR 0@MAJOR ${{env.MAJOR}}@g" \
                     -e "s@MINOR 0@MINOR ${{env.MINOR}}@g" \
                     -e "s@BUILD 0@BUILD ${{ env.BUILD_ID }}@g" \
                     src/OSPSuite.FuncParserNative/version.h

      - name: Remove Native Project for macOS
        run: dotnet sln OSPSuite.FuncParser.sln remove src/OSPSuite.FuncParserNative/OSPSuite.FuncParserNative.vcxproj

      - name: Configure the native build (release)
        run: cmake -BBuild/Release/x64/ -Hsrc/OSPSuite.FuncParserNative/ -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64

      - name: Configure the native build (debug)
        run: cmake -BBuild/Debug/x64/ -Hsrc/OSPSuite.FuncParserNative/ -DCMAKE_BUILD_TYPE=Debug -DCMAKE_OSX_ARCHITECTURES=arm64
      
      - name: Build native libraries (release)
        run: make -C Build/Release/x64

      - name: Build native libraries (debug)
        run: make -C Build/Debug/x64
        
      - name: Build the project (release)
        run: dotnet build OSPSuite.FuncParser.sln --configuration Release

      - name: Build the project (debug)
        run: dotnet build OSPSuite.FuncParser.sln --configuration Debug

      - name: Test
        run: dotnet test --configuration Release --no-build

      - name: Pack the project
        run: dotnet pack src/OSPSuite.FuncParser/ -o ./ -p:PackageVersion=${{env.APP_VERSION}}

      - name: Push nupkg as artefact
        # if it is a push to a branch
        if: github.event_name == 'push' && github.ref_name != github.event.repository.default_branch
        uses: actions/upload-artifact@v3
        with:
          name: OSPSuite.FuncParser.MacOS.Arm64
          path: ./*.nupkg

      - name: Publish to GitHub registry
        # if it is a merge to default branch
        if: github.event_name == 'push' && github.ref_name == github.event.repository.default_branch
        run: dotnet nuget push ./*.nupkg --source https://nuget.pkg.github.com/${{github.repository_owner}}/index.json --api-key ${{ secrets.GITHUB_TOKEN }}

  build-macos-x64:
    runs-on: macos-13
    needs: get-version

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: define env variables
        run: |
          echo "APP_VERSION=${{needs.get-version.outputs.APP_VERSION}}" >> $GITHUB_ENV
          echo "BUILD_ID=${{needs.get-version.outputs.BUILD_ID}}" >> $GITHUB_ENV

      - name: Restore dependencies
        run: dotnet restore --source https://ci.appveyor.com/nuget/ospsuite-utility --source https://ci.appveyor.com/nuget/ospsuite-bddhelper --source https://www.nuget.org/api/v2/

      - name: Update version.h
        run: |
          LC_ALL=C sed -i '' -e "s@RELEASE 0@RELEASE ${{env.RELEASE}}@g" \
                     -e "s@MAJOR 0@MAJOR ${{env.MAJOR}}@g" \
                     -e "s@MINOR 0@MINOR ${{env.MINOR}}@g" \
                     -e "s@BUILD 0@BUILD ${{ env.BUILD_ID }}@g" \
                     src/OSPSuite.FuncParserNative/version.h

      - name: Remove Native Project for macOS
        run: dotnet sln OSPSuite.FuncParser.sln remove src/OSPSuite.FuncParserNative/OSPSuite.FuncParserNative.vcxproj

      - name: Configure the native build (release)
        run: cmake -BBuild/Release/x64/ -Hsrc/OSPSuite.FuncParserNative/ -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64

      - name: Configure the native build (debug)
        run: cmake -BBuild/Debug/x64/ -Hsrc/OSPSuite.FuncParserNative/ -DCMAKE_BUILD_TYPE=Debug -DCMAKE_OSX_ARCHITECTURES=x86_64
      
      - name: Build native libraries (release)
        run: make -C Build/Release/x64

      - name: Build native libraries (debug)
        run: make -C Build/Debug/x64
        
      - name: Build the project (release)
        run: dotnet build OSPSuite.FuncParser.sln --configuration Release

      - name: Build the project (debug)
        run: dotnet build OSPSuite.FuncParser.sln --configuration Debug

      - name: Test
        run: dotnet test --configuration Release --no-build

      - name: Pack the project
        run: dotnet pack src/OSPSuite.FuncParser/ -o ./ -p:PackageVersion=${{env.APP_VERSION}}

      - name: Push nupkg as artefact
        # if it is a push to a branch
        if: github.event_name == 'push' && github.ref_name != github.event.repository.default_branch
        uses: actions/upload-artifact@v3
        with:
          name: OSPSuite.FuncParser.MacOS.x64
          path: ./*.nupkg

      - name: Publish to GitHub registry
        # if it is a merge to default branch
        if: github.event_name == 'push' && github.ref_name == github.event.repository.default_branch
        run: dotnet nuget push ./*.nupkg --source https://nuget.pkg.github.com/${{github.repository_owner}}/index.json --api-key ${{ secrets.GITHUB_TOKEN }}

  build-linux-x64:
    runs-on: ubuntu-22.04
    needs: get-version

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: define env variables
        run: |
          echo "APP_VERSION=${{needs.get-version.outputs.APP_VERSION}}" >> $GITHUB_ENV
          echo "BUILD_ID=${{needs.get-version.outputs.BUILD_ID}}" >> $GITHUB_ENV

      - name: Restore dependencies
        run: dotnet restore --source https://ci.appveyor.com/nuget/ospsuite-utility --source https://ci.appveyor.com/nuget/ospsuite-bddhelper --source https://www.nuget.org/api/v2/

      - name: Update version.h
        run: |
          LC_ALL=C sed -i -e "s@RELEASE 0@RELEASE ${{env.RELEASE}}@g" \
                     -e "s/MAJOR 0/MAJOR ${{env.MAJOR}}/g" \
                     -e "s/MINOR 0/MINOR ${{env.MINOR}}/g" \
                     -e "s/BUILD 0/BUILD ${{ env.BUILD_ID }}/g" \
                     src/OSPSuite.FuncParserNative/version.h

      - name: Remove Native Project for Linux
        run: dotnet sln OSPSuite.FuncParser.sln remove src/OSPSuite.FuncParserNative/OSPSuite.FuncParserNative.vcxproj

        
      - name: Configure the native build (release)
        run: cmake -BBuild/Release/x64/ -Hsrc/OSPSuite.FuncParserNative/ -DCMAKE_BUILD_TYPE=Release

      - name: Configure the native build (debug)
        run: cmake -BBuild/Debug/x64/ -Hsrc/OSPSuite.FuncParserNative/ -DCMAKE_BUILD_TYPE=Debug
      
      - name: Build native libraries (release)
        run: make -C Build/Release/x64

      - name: Build native libraries (debug)
        run: make -C Build/Debug/x64

      - name: Build the project (release)
        run: dotnet build OSPSuite.FuncParser.sln /property:Configuration=Release;Platform=x64

      - name: Build the project (debug)
        run: dotnet build OSPSuite.FuncParser.sln /property:Configuration=Debug;Platform=x64

      - name: Test
        run: dotnet test --configuration Release --no-build

      - name: Pack the project        
        run: dotnet pack src/OSPSuite.FuncParser/ -o ./ -p:PackageVersion=${{env.APP_VERSION}}

      - name: Push nupkg as artefact
        # if it is a push to a branch
        if: github.event_name == 'push' && github.ref_name != github.event.repository.default_branch
        uses: actions/upload-artifact@v3
        with:
          name: OSPSuite.FuncParser.Ubuntu22
          path: ./*.nupkg

      - name: Publish to GitHub registry
        # if it is a merge to default branch
        if: github.event_name == 'push' && github.ref_name == github.event.repository.default_branch
        run: dotnet nuget push ./*.nupkg --source https://nuget.pkg.github.com/${{github.repository_owner}}/index.json --api-key ${{ secrets.GITHUB_TOKEN }}

  build-windows-x64:
    runs-on: windows-latest
    needs: get-version

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: define env variables
        run: |
          echo "APP_VERSION=${{needs.get-version.outputs.APP_VERSION}}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "BUILD_ID=${{needs.get-version.outputs.BUILD_ID}}" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Restore dependencies
        run: dotnet restore --source https://ci.appveyor.com/nuget/ospsuite-utility --source https://ci.appveyor.com/nuget/ospsuite-bddhelper --source https://www.nuget.org/api/v2/

      - name: Update version.h
        shell: pwsh
        run: |
          (get-content src\OSPSuite.FuncParserNative\version.h) | foreach-object {$_ -replace "RELEASE 0", "RELEASE ${{env.RELEASE}}" -replace "MAJOR 0", "MAJOR ${{env.MAJOR}}" -replace "MINOR 0", "MINOR ${{env.MINOR}}" -replace "BUILD 0", "BUILD ${{ env.BUILD_ID }}" } | set-content src\OSPSuite.FuncParserNative\version.h

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: build release
        run: msbuild OSPSuite.FuncParser.sln /p:Configuration=Release /p:Platform=x64

      - name: build debug
        run: msbuild OSPSuite.FuncParser.sln /p:Configuration=Debug /p:Platform=x64

      - name: Test
        run: dotnet test --no-build --no-restore

      - name: Pack the project
        run: dotnet pack src/OSPSuite.FuncParser/ -o ./ -p:PackageVersion=${{env.APP_VERSION}}

      - name: Push nupkg as artefact
        # if it is a push to a branch
        if: github.event_name == 'push' && github.ref_name != github.event.repository.default_branch
        uses: actions/upload-artifact@v3
        with:
          name: OSPSuite.FuncParser
          path: ./*.nupkg

      - name: Publish to GitHub registry
        # if it is a merge to default branch
        if: github.event_name == 'push' && github.ref_name == github.event.repository.default_branch
        shell: pwsh
        run: dotnet nuget push .\OSPSuite.FuncParser*.nupkg --source https://nuget.pkg.github.com/${{github.repository_owner}}/index.json --api-key ${{ secrets.GITHUB_TOKEN }}